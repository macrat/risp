" vim: set ft=lisp : "

(def test (import "./test.risp"))
(def assert (test assert))

((test case)
 "length"
 (func ()
       ((test case)
        "list"
        (func ()
              (assert = 3 (length (list 1 2 3)))
              (assert = 5 (length (list 1 2 3 4 5)))
              (assert = 0 (length ()))))

        ((test case)
         "string"
         (func ()
               (assert = 11 (length "hello world"))
               (assert = 5 (length "あいうえお"))
               (assert = 0 (length ""))))

       (try-catch
         (func (err trace)
               (assert = err (list "incompatible type" "the argument of `length` must be a list or a string, but got number.")))
         (length 1))))

((test case)
 "get"
 (func ()
       ((test case)
        "list"
         (func ()
               (assert = 15 (get 0 (seq 15 20)))
               (assert = 16 (get 1 (seq 15 20)))
               (assert = 18 (get 3 (seq 15 20)))

               (assert = 20 (get -1 (seq 15 20)))
               (assert = 19 (get -2 (seq 15 20)))

               (try-catch
                 (func (err trace)
                       (assert = err (list "out of bounds" "10 is out of bounds for length 5.")))
                 (get 10 (seq 5)))))

       ((test case)
        "string"
         (func ()
               (assert = "a" (get 0 "abcde"))
               (assert = "b" (get 1 "abcde"))
               (assert = "d" (get 3 "abcde"))

               (assert = "e" (get -1 "abcde"))
               (assert = "d" (get -2 "abcde"))

               (assert = "お" (get 4 "あいうえお"))

               (try-catch
                 (func (err trace)
                       (assert = err (list "out of bounds" "10 is out of bounds for length 5.")))
                 (get 10 "abcde"))

               (try-catch
                 (func (err trace)
                       (assert = err (list "out of bounds" "10 is out of bounds for length 5.")))
                 (get 10 "あいうえお"))))))

((test case)
 "car cdr"

 (func ()
       ((test case)
        "list"
        (func ()
              (def xs (list 12 34 56))
              (assert = 12 (car xs))
              (assert = (list 34 56) (cdr xs))
              (assert = 34 (car (cdr xs)))))

       ((test case)
        "string"
        (func ()
              (def xs "hello")
              (assert = "h" (car xs))
              (assert = "e" (car (cdr xs)))
              (assert = "llo" (cdr (cdr xs)))))))

((test case)
 "map"
 (func ()
       (def f (func (x) (* x 2)))
       (def xs (map f (seq 5)))
       (assert = (list 2 4 6 8 10) xs)

       (assert = (list 0 1 0) (map not (seq -1 1)))

       (assert = (list "a") (map + (list "a")))

       (assert =
               (list "a" "b")
               (map car (list (list "a" 1) (list "b" 2))))))

((test case)
 "fold"
 (func ()
       (assert = 15 (fold + (seq 5)))
       (assert = 120 (fold * (seq 5)))

       (assert = "hello" (fold + (list "he" "l" "lo")))

       (assert = "a" (fold + (list "a")))
       (assert = () (fold + ()))

       (assert =
               "ab"
               (fold (func (acc cur) (+ acc (car cur)))
                     (list "" (list "a" 1) (list "b" 2))))))
