" vim: set ft=lisp : "

(def test (import "./test.risp"))
(def assert (test assert))

(do
  (def result 0)
  (if 1
    (set result 1)
    (set result 2))
  (assert = 1 result))

(do
  (def result 0)
  (if 1
    (set result 1))
  (assert = 1 result))

(do
  (def result 0)
  (if 0
    (set result 1))
  (assert = 0 result))

(do
  (def result 0)
  (if "hello"
    (set result 1)
    (set result 2))
  (assert = 1 result))

(do
  (def result 0)
  (if ()
    (set result 1)
    (set result 2))
  (assert = 2 result))

(do
  (def result 0)
  (if (not ())
    (set result 1)
    (set result 2))
  (assert = 1 result))

((test case)
 "not"
 (func ()
       (assert = 1 (not 0))
       (assert = 0 (not 1))))

((test case)
 "and"
 (func ()
       (assert = 0 (and 0 0 0))
       (assert = 0 (and 1 0 0))
       (assert = 0 (and 0 1 1))
       (assert = 1 (and 1 1 1))

       (do
         (def called 0)
         (assert = 0 (and 0 (set called 1)))
         (assert = 0 called)
         (assert = 1 (and 1 (set called 1)))
         (assert = 1 called))))

((test case)
 "or"
 (func ()
       (assert = 0 (or 0 0 0))
       (assert = 1 (or 1 0 0))
       (assert = 1 (or 0 1 1))
       (assert = 1 (or 1 1 1))


       (do
         (def called 0)
         (assert = 1 (or 1 (set called 1)))
         (assert = 0 called)
         (assert = 1 (or 0 (set called 1)))
         (assert = 1 called))))

((test case)
 "number of arguments"
 (func ()
       (do
         (try-catch
           (func (err trace)
                 (assert = err (list "unmatched arguments" "`if` needs 2 or 3 arguments but got 1.")))

           (if 1)))

       (do
         (try-catch
           (func (err trace)
                 (assert = err (list "unmatched arguments" "`if` needs 2 or 3 arguments but got 4.")))

           (if 1 2 3 4)))))
